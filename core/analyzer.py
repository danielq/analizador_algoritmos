"""
Analizador principal de algoritmos
Responsable de coordinar el an√°lisis de complejidad temporal
"""

import ast
import re
from typing import Dict, List, Tuple, Optional
from pathlib import Path

from .complexity import ComplexityCalculator
from .patterns import PatternDetector
from utils.parser import CodeParser


class AlgorithmAnalyzer:
    """Analizador principal de algoritmos para calcular notaci√≥n asint√≥tica"""
    
    def __init__(self, use_neural_network: bool = True, model_path: Optional[str] = None):
        self.complexity_calc = ComplexityCalculator()
        self.pattern_detector = PatternDetector()
        self.code_parser = CodeParser()
        self.use_neural_network = use_neural_network
        self.neural_classifier = None
        
        # Cargar modelo de red neuronal si est√° disponible
        if use_neural_network and model_path:
            try:
                from ml.neural_network import AlgorithmClassifier
                self.neural_classifier = AlgorithmClassifier(model_path)
                print("üß† Modelo de red neuronal cargado exitosamente")
            except Exception as e:
                print(f"‚ö†Ô∏è No se pudo cargar el modelo de red neuronal: {e}")
                self.use_neural_network = False
        
    def analyze_code(self, code: str, language: str = 'python') -> Dict:
        """
        Analiza c√≥digo fuente y calcula su complejidad temporal
        
        Args:
            code: C√≥digo fuente a analizar
            language: Lenguaje de programaci√≥n
            
        Returns:
            Diccionario con resultados del an√°lisis
        """
        try:
            # Parsear el c√≥digo seg√∫n el lenguaje
            parsed_code = self.code_parser.parse(code, language)
            
            # Detectar patrones de complejidad
            patterns = self.pattern_detector.detect_patterns(code, language)
            
            # Calcular complejidad usando m√©todos tradicionales
            complexity = self.complexity_calc.calculate_complexity(patterns)
            traditional_notation = self._generate_notation(complexity)
            
            # Predicci√≥n de la red neuronal (si est√° disponible)
            neural_notation = None
            neural_confidence = 0.0
            
            if self.use_neural_network and self.neural_classifier:
                try:
                    neural_notation, neural_confidence = self.neural_classifier.predict(code)
                except Exception as e:
                    print(f"‚ö†Ô∏è Error en predicci√≥n de red neuronal: {e}")
            
            # Combinar resultados
            final_notation = self._combine_predictions(
                traditional_notation, neural_notation, neural_confidence
            )
            
            return {
                'success': True,
                'language': language,
                'patterns': patterns,
                'complexity': complexity,
                'notation': final_notation,
                'traditional_notation': traditional_notation,
                'neural_notation': neural_notation,
                'neural_confidence': neural_confidence,
                'explanation': self._generate_explanation(
                    patterns, complexity, final_notation, 
                    traditional_notation, neural_notation, neural_confidence
                )
            }
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'language': language
            }
    
    def analyze_file(self, file_path: str, language: str = 'python') -> Dict:
        """
        Analiza un archivo de c√≥digo fuente
        
        Args:
            file_path: Ruta al archivo
            language: Lenguaje de programaci√≥n
            
        Returns:
            Diccionario con resultados del an√°lisis
        """
        try:
            path_obj = Path(file_path)
            if not path_obj.exists():
                raise FileNotFoundError(f"Archivo no encontrado: {file_path}")
                
            with open(path_obj, 'r', encoding='utf-8') as f:
                code = f.read()
                
            return self.analyze_code(code, language)
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'file_path': str(file_path),
                'language': language
            }
    
    def _combine_predictions(self, traditional: str, neural: Optional[str], 
                           confidence: float) -> str:
        """Combina predicciones tradicionales y de red neuronal"""
        if not neural or confidence < 0.7:
            # Si la red neuronal no est√° disponible o tiene baja confianza,
            # usar predicci√≥n tradicional
            return traditional
        
        # Si la confianza es alta, usar predicci√≥n de red neuronal
        if confidence > 0.9:
            return neural
        
        # Si la confianza es media, verificar si coinciden
        if traditional == neural:
            return traditional
        else:
            # En caso de conflicto, usar la predicci√≥n tradicional
            # pero marcar la discrepancia
            return traditional
    
    def _generate_notation(self, complexity: Dict) -> str:
        """Genera la notaci√≥n asint√≥tica basada en la complejidad calculada"""
        dominant_term = complexity.get('dominant_term', 'O(1)')
        
        # Mapear t√©rminos a notaciones est√°ndar
        notation_map = {
            'O(1)': 'O(1)',
            'O(log n)': 'O(log n)',
            'O(n)': 'O(n)',
            'O(n log n)': 'O(n log n)',
            'O(n¬≤)': 'O(n¬≤)',
            'O(n¬≥)': 'O(n¬≥)',
            'O(2‚Åø)': 'O(2‚Åø)',
            'O(n!)': 'O(n!)'
        }
        
        return notation_map.get(dominant_term, dominant_term) or 'O(1)'
    
    def _generate_explanation(self, patterns: List, complexity: Dict, 
                            final_notation: str, traditional_notation: str,
                            neural_notation: Optional[str], neural_confidence: float) -> str:
        """Genera una explicaci√≥n detallada del an√°lisis"""
        explanation = f"El algoritmo tiene una complejidad temporal de {final_notation}.\n\n"
        
        # Explicaci√≥n de m√©todos tradicionales
        explanation += "üìä AN√ÅLISIS TRADICIONAL:\n"
        explanation += f"‚Ä¢ Notaci√≥n calculada: {traditional_notation}\n"
        
        if patterns:
            explanation += "‚Ä¢ Patrones detectados:\n"
            for pattern in patterns:
                explanation += f"  - {pattern['type']}: {pattern['description']}\n"
        else:
            explanation += "‚Ä¢ No se detectaron patrones espec√≠ficos\n"
        
        explanation += f"‚Ä¢ T√©rmino dominante: {complexity.get('dominant_term', 'O(1)')}\n"
        explanation += f"‚Ä¢ Complejidad total: {complexity.get('total_complexity', 'O(1)')}\n\n"
        
        # Explicaci√≥n de red neuronal
        if self.use_neural_network and neural_notation:
            explanation += "üß† AN√ÅLISIS DE RED NEURONAL:\n"
            explanation += f"‚Ä¢ Notaci√≥n predicha: {neural_notation}\n"
            explanation += f"‚Ä¢ Confianza: {neural_confidence:.2%}\n"
            
            if traditional_notation != neural_notation:
                explanation += "‚Ä¢ ‚ö†Ô∏è Discrepancia entre m√©todos detectada\n"
            else:
                explanation += "‚Ä¢ ‚úÖ Coincidencia entre m√©todos\n"
            
            explanation += "\n"
        
        # Nota sobre el m√©todo final
        if self.use_neural_network and neural_notation and neural_confidence > 0.7:
            if traditional_notation == neural_notation:
                explanation += "‚úÖ RESULTADO FINAL: Ambos m√©todos coinciden en la predicci√≥n.\n"
            else:
                explanation += "ü§ñ RESULTADO FINAL: Basado en an√°lisis tradicional (red neuronal en conflicto).\n"
        else:
            explanation += "üìà RESULTADO FINAL: Basado en an√°lisis tradicional.\n"
        
        return explanation
    
    def get_supported_languages(self) -> List[str]:
        """Retorna la lista de lenguajes soportados"""
        return ['python', 'javascript', 'java', 'cpp']
    
    def get_complexity_examples(self) -> Dict[str, str]:
        """Retorna ejemplos de algoritmos con sus complejidades"""
        return {
            'O(1)': 'Acceso directo a array, operaciones aritm√©ticas',
            'O(log n)': 'B√∫squeda binaria, algoritmos de divisi√≥n y conquista',
            'O(n)': 'B√∫squeda lineal, recorrido de array',
            'O(n log n)': 'Merge sort, Quick sort, Heap sort',
            'O(n¬≤)': 'Bubble sort, Selection sort, algoritmos con bucles anidados',
            'O(n¬≥)': 'Multiplicaci√≥n de matrices, algoritmos con tres bucles anidados',
            'O(2‚Åø)': 'Fibonacci recursivo, algoritmos de fuerza bruta',
            'O(n!)': 'Permutaciones, algoritmos de backtracking'
        }
    
    def enable_neural_network(self, model_path: str):
        """Habilita el uso de la red neuronal"""
        try:
            from ml.neural_network import AlgorithmClassifier
            self.neural_classifier = AlgorithmClassifier(model_path)
            self.use_neural_network = True
            print("üß† Red neuronal habilitada exitosamente")
        except Exception as e:
            print(f"‚ùå Error al habilitar red neuronal: {e}")
            self.use_neural_network = False
    
    def disable_neural_network(self):
        """Deshabilita el uso de la red neuronal"""
        self.use_neural_network = False
        self.neural_classifier = None
        print("üìä Red neuronal deshabilitada, usando solo an√°lisis tradicional") 