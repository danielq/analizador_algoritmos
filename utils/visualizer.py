"""
Visualizador de resultados del an√°lisis de algoritmos
"""

import matplotlib.pyplot as plt
import numpy as np
from typing import Dict, List, Optional
import tkinter as tk
from tkinter import ttk
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import math


class ResultVisualizer:
    """Visualiza los resultados del an√°lisis de algoritmos"""
    
    def __init__(self):
        self.complexity_colors = {
            'O(1)': '#2E8B57',      # Verde mar
            'O(log n)': '#4169E1',  # Azul real
            'O(n)': '#32CD32',      # Verde lima
            'O(n log n)': '#FF8C00', # Naranja oscuro
            'O(n¬≤)': '#FF4500',     # Rojo naranja
            'O(n¬≥)': '#DC143C',     # Carmes√≠
            'O(2‚Åø)': '#8B0000',     # Rojo oscuro
            'O(n!)': '#4B0082'      # √çndigo
        }
    
    def create_complexity_chart(self, complexity_data: Dict) -> Figure:
        """Crea un gr√°fico de complejidad temporal"""
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
        
        # Gr√°fico de barras de complejidades
        notations = list(self.complexity_colors.keys())
        colors = list(self.complexity_colors.values())
        
        # Simular datos de tiempo de ejecuci√≥n para diferentes tama√±os
        n_values = [10, 100, 1000, 10000]
        
        # Calcular tiempos para cada notaci√≥n
        for i, notation in enumerate(notations):
            times = []
            for n in n_values:
                if notation == 'O(1)':
                    time = 1
                elif notation == 'O(log n)':
                    time = np.log2(n)
                elif notation == 'O(n)':
                    time = n
                elif notation == 'O(n log n)':
                    time = n * np.log2(n)
                elif notation == 'O(n¬≤)':
                    time = n**2
                elif notation == 'O(n¬≥)':
                    time = n**3
                elif notation == 'O(2‚Åø)':
                    time = 2**n if n <= 10 else 1000  # Limitar para visualizaci√≥n
                elif notation == 'O(n!)':
                    time = math.factorial(n) if n <= 8 else 1000  # Limitar para visualizaci√≥n
                else:
                    time = 1
                times.append(time)
            
            ax1.plot(n_values, times, color=colors[i], label=notation, linewidth=2, marker='o')
        
        ax1.set_xlabel('Tama√±o de entrada (n)')
        ax1.set_ylabel('Tiempo de ejecuci√≥n (relativo)')
        ax1.set_title('Comparaci√≥n de Complejidades Temporales')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        ax1.set_yscale('log')
        
        # Gr√°fico de pastel de distribuci√≥n
        if 'terms' in complexity_data:
            terms = complexity_data['terms']
            if terms:
                term_types = [term['type'] for term in terms]
                term_counts = {}
                for term_type in term_types:
                    term_counts[term_type] = term_counts.get(term_type, 0) + 1
                
                labels = list(term_counts.keys())
                sizes = list(term_counts.values())
                colors_pie = [self.complexity_colors.get(f"O({label})", '#808080') for label in labels]
                
                ax2.pie(sizes, labels=labels, colors=colors_pie, autopct='%1.1f%%', startangle=90)
                ax2.set_title('Distribuci√≥n de Patrones Detectados')
        
        plt.tight_layout()
        return fig
    
    def create_tkinter_visualization(self, parent: tk.Widget, complexity_data: Dict) -> tk.Widget:
        """Crea una visualizaci√≥n en Tkinter"""
        # Frame para la visualizaci√≥n
        viz_frame = ttk.Frame(parent)
        
        # Crear gr√°fico
        fig = self.create_complexity_chart(complexity_data)
        
        # Integrar matplotlib con Tkinter
        canvas = FigureCanvasTkAgg(fig, viz_frame)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
        return viz_frame
    
    def create_text_summary(self, result: Dict) -> str:
        """Crea un resumen textual de los resultados"""
        if not result.get('success'):
            return "‚ùå Error en el an√°lisis"
        
        notation = result.get('notation', 'No determinado')
        explanation = result.get('explanation', '')
        
        summary = f"""
üìä RESUMEN DEL AN√ÅLISIS
{'='*50}

üéØ NOTACI√ìN ASINT√ìTICA: {notation}

üìù EXPLICACI√ìN:
{explanation}

üîç PATRONES DETECTADOS:
"""
        
        if result.get('patterns'):
            for i, pattern in enumerate(result['patterns'], 1):
                summary += f"{i}. {pattern['type']}: {pattern['description']}\n"
        else:
            summary += "No se detectaron patrones espec√≠ficos\n"
        
        if result.get('complexity'):
            complexity = result['complexity']
            summary += f"\nüî¨ DETALLES T√âCNICOS:\n"
            summary += f"‚Ä¢ T√©rmino dominante: {complexity.get('dominant_term', 'O(1)')}\n"
            summary += f"‚Ä¢ Complejidad total: {complexity.get('total_complexity', 'O(1)')}\n"
        
        return summary
    
    def create_complexity_guide(self) -> str:
        """Crea una gu√≠a de complejidades"""
        guide = """
üìö GU√çA DE COMPLEJIDADES TEMPORALES
{'='*50}

üü¢ O(1) - Constante
   ‚Ä¢ Acceso directo a arrays
   ‚Ä¢ Operaciones aritm√©ticas b√°sicas
   ‚Ä¢ Ejemplo: arr[0], x + y

üîµ O(log n) - Logar√≠tmica
   ‚Ä¢ B√∫squeda binaria
   ‚Ä¢ Algoritmos de divisi√≥n y conquista
   ‚Ä¢ Ejemplo: binary_search()

üü¢ O(n) - Lineal
   ‚Ä¢ B√∫squeda lineal
   ‚Ä¢ Recorrido de arrays
   ‚Ä¢ Ejemplo: for i in range(n):

üü† O(n log n) - Lineal√≠tmica
   ‚Ä¢ Merge Sort, Quick Sort, Heap Sort
   ‚Ä¢ Algoritmos de ordenamiento eficientes
   ‚Ä¢ Ejemplo: sorted(arr)

üü° O(n¬≤) - Cuadr√°tica
   ‚Ä¢ Bubble Sort, Selection Sort
   ‚Ä¢ Bucles anidados
   ‚Ä¢ Ejemplo: for i in range(n): for j in range(n):

üî¥ O(n¬≥) - C√∫bica
   ‚Ä¢ Multiplicaci√≥n de matrices
   ‚Ä¢ Tres bucles anidados
   ‚Ä¢ Ejemplo: for i in range(n): for j in range(n): for k in range(n):

üü£ O(2‚Åø) - Exponencial
   ‚Ä¢ Fibonacci recursivo
   ‚Ä¢ Algoritmos de fuerza bruta
   ‚Ä¢ Ejemplo: def fib(n): return fib(n-1) + fib(n-2)

‚ö´ O(n!) - Factorial
   ‚Ä¢ Permutaciones
   ‚Ä¢ Algoritmos de backtracking
   ‚Ä¢ Ejemplo: generar todas las permutaciones
"""
        return guide
    
    def create_performance_comparison(self, algorithms: List[Dict]) -> Figure:
        """Crea una comparaci√≥n de rendimiento entre algoritmos"""
        fig, ax = plt.subplots(figsize=(10, 6))
        
        n_values = np.logspace(1, 4, 100)  # 10 a 10000
        
        for algorithm in algorithms:
            name = algorithm.get('name', 'Algoritmo')
            notation = algorithm.get('notation', 'O(n)')
            
            # Calcular tiempos
            times = []
            for n in n_values:
                if notation == 'O(1)':
                    time = 1
                elif notation == 'O(log n)':
                    time = np.log2(n)
                elif notation == 'O(n)':
                    time = n
                elif notation == 'O(n log n)':
                    time = n * np.log2(n)
                elif notation == 'O(n¬≤)':
                    time = n**2
                elif notation == 'O(n¬≥)':
                    time = n**3
                elif notation == 'O(2‚Åø)':
                    time = 2**n if n <= 10 else 1000
                elif notation == 'O(n!)':
                    time = math.factorial(n) if n <= 8 else 1000
                else:
                    time = n
                times.append(time)
            
            color = self.complexity_colors.get(notation, '#808080')
            ax.plot(n_values, times, label=f"{name} ({notation})", color=color, linewidth=2)
        
        ax.set_xlabel('Tama√±o de entrada (n)')
        ax.set_ylabel('Tiempo de ejecuci√≥n (relativo)')
        ax.set_title('Comparaci√≥n de Rendimiento de Algoritmos')
        ax.legend()
        ax.grid(True, alpha=0.3)
        ax.set_yscale('log')
        ax.set_xscale('log')
        
        plt.tight_layout()
        return fig 